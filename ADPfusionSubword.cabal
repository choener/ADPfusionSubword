name:           ADPfusionSubword
version:        0.0.0.1
author:         Christian Hoener zu Siederdissen, 2016
copyright:      Christian Hoener zu Siederdissen, 2016
homepage:       https://github.com/choener/ADPfusionSubword
bug-reports:    https://github.com/choener/ADPfusionSubword/issues
maintainer:     choener@bioinf.uni-leipzig.de
category:       Algorithms, Data Structures, Bioinformatics, Formal Languages
license:        BSD3
license-file:   LICENSE
build-type:     Simple
stability:      experimental
cabal-version:  >= 1.10.0
tested-with:    GHC == 7.8.4, GHC == 7.10.3, GHC == 8.0.1
synopsis:       Efficient, high-level dynamic programming.
description:
                <http://www.bioinf.uni-leipzig.de/Software/gADP/ generalized Algebraic Dynamic Programming>
                .
                ADPfusion combines stream-fusion (using the stream interface
                provided by the vector library) and type-level programming to
                provide highly efficient dynamic programming combinators.
                .
                ADPfusion allows writing dynamic programs for single- and
                multi-tape problems. Inputs can be sequences, or sets. New
                input types can be defined, without having to rewrite this
                library thanks to the open-world assumption of ADPfusion.
                .
                The library provides the machinery for Outside and Ensemble
                algorithms as well. Ensemble algorithms combine Inside and
                Outside calculations.
                .
                Starting with version 0.4.1 we support writing multiple
                context-free grammars (interleaved syntactic variables). Such
                grammars have applications in bioinformatics and linguistics.
                .
                The homepage provides a number of tutorial-style examples, with
                linear and context-free grammars over sequence and set inputs.
                .
                The formal background for generalized algebraic dynamic
                progrmaming and ADPfusion is described in a number of papers.
                These can be found on the gADP homepage and in the README.
                .



Extra-Source-Files:
  README.md
  changelog.md



flag examples
  description:  build the examples
  default:      False
  manual:       True

flag debug
  description:  dump intermediate Core files
  default:      False
  manual:       True



library
  build-depends: base               >= 4.7    &&  < 5.0
               , bits               >= 0.4    &&  < 0.6
               , containers
               , mmorph             >= 1.0    &&  < 1.1
               , mtl                >= 2.0    &&  < 2.3
               , primitive          >= 0.5.4  &&  < 0.7
               , QuickCheck         >= 2.7    &&  < 2.9
               , strict             >= 0.3    &&  < 0.4
               , template-haskell   >= 2.0    &&  < 3.0
               , th-orphans         >= 0.12   &&  < 0.14
               , transformers       >= 0.3    &&  < 0.6
               , tuple              >= 0.3    &&  < 0.4
               , vector             >= 0.11   &&  < 0.12
               --
               , ADPfusion          == 0.5.2.*
               , DPutils            == 0.0.1.*
               , OrderedBits        == 0.0.1.*
               , PrimitiveArray     == 0.7.1.*

  exposed-modules:
    ADP.Fusion.Subword
    --
    ADP.Fusion.Core.Subword
    ADP.Fusion.SynVar.Array.TermSymbol.Subword
    ADP.Fusion.SynVar.Indices.Subword
    ADP.Fusion.SynVar.Recursive.Subword
    ADP.Fusion.SynVar.Split.Subword
    ADP.Fusion.Term.Chr.Subword
    ADP.Fusion.Term.Deletion.Subword
    ADP.Fusion.Term.Epsilon.Subword
    ADP.Fusion.Term.PeekIndex.Subword
    ADP.Fusion.Term.Strng.Subword

  default-extensions: BangPatterns
                    , ConstraintKinds
                    , CPP
                    , DataKinds
                    , DefaultSignatures
                    , FlexibleContexts
                    , FlexibleInstances
                    , GADTs
                    , KindSignatures
                    , MultiParamTypeClasses
                    , RankNTypes
                    , RecordWildCards
                    , ScopedTypeVariables
                    , StandaloneDeriving
                    , TemplateHaskell
                    , TupleSections
                    , TypeFamilies
                    , TypeOperators
                    , TypeSynonymInstances
                    , UndecidableInstances

  default-language:
    Haskell2010
  ghc-options:
    -O2 -funbox-strict-fields



-- Basic RNA secondary structure folding

executable Nussinov

  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  template-haskell
                 ,  vector
                 --
                 ,  ADPfusionSubword
                 ,  PrimitiveArray
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    Nussinov.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
                    , UndecidableInstances
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all



-- Basic RNA secondary structure folding with partition function calculations

executable PartNussinov

  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  log-domain        == 0.10.*
                 ,  template-haskell
                 ,  vector
                 --
                 ,  ADPfusionSubword
                 ,  PrimitiveArray
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    PartNussinov.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all



executable Durbin
  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  template-haskell
                 ,  vector
                 --
                 ,  ADPfusionSubword
                 ,  PrimitiveArray
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    Durbin.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all



executable Pseudoknot
  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  template-haskell
                 ,  vector
                 --
                 ,  ADPfusionSubword
                 ,  PrimitiveArray
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    Pseudoknot.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , DataKinds
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all



executable OverlappingPalindromes
  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  template-haskell
                 ,  vector
                 --
                 ,  ADPfusionSubword
                 ,  PrimitiveArray
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    OverlappingPalindromes.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all



executable SplitTests
  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  template-haskell
                 ,  vector
                 --
                 ,  ADPfusionSubword
                 ,  PrimitiveArray
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    SplitTests.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all



test-suite properties
  type:
    exitcode-stdio-1.0
  main-is:
    properties.hs
  other-modules:
    -- QuickCheck.Common
    QuickCheck.Subword
  ghc-options:
    -threaded -rtsopts -with-rtsopts=-N
  hs-source-dirs:
    tests
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , CPP
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , ScopedTypeVariables
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
                    , TypeSynonymInstances
  cpp-options:
    -DADPFUSION_TEST_SUITE_PROPERTIES
  build-depends: base
               , bits
               , QuickCheck
               , strict
               , tasty              >= 0.11
               , tasty-quickcheck   >= 0.8
               , tasty-th           >= 0.1
--               , test-framework               >= 0.8  && < 0.9
--               , test-framework-quickcheck2   >= 0.3  && < 0.4
--               , test-framework-th            >= 0.2  && < 0.3
               , vector
               --
               , ADPfusionSubword
               , OrderedBits
               , PrimitiveArray



benchmark performance
  type:
    exitcode-stdio-1.0
  main-is:
    performance.hs
  ghc-options:
    -rtsopts -with-rtsopts=-N -with-rtsopts=-T
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
  if flag(debug)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all
  hs-source-dirs:
    tests
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , DeriveGeneric
                    , FlexibleContexts
                    , RecordWildCards
                    , StandaloneDeriving
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  build-depends: base
               , vector
               --
               , ADPfusionSubword
               , BenchmarkHistory   == 0.0.0.*
               , PrimitiveArray



source-repository head
  type: git
  location: git://github.com/choener/ADPfusionSubword

